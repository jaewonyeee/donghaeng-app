"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useVideo = void 0;
var _react = require("react");
var _Skia = require("../../skia/Skia");
var _ReanimatedProxy = _interopRequireDefault(require("./ReanimatedProxy"));
var _video = require("./video");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const defaultOptions = {
  playbackSpeed: 1,
  looping: true,
  paused: false,
  seek: null,
  currentTime: 0
};
const useOption = value => {
  "worklet";

  // TODO: only create defaultValue is needed (via makeMutable)
  const defaultValue = _ReanimatedProxy.default.useSharedValue(_ReanimatedProxy.default.isSharedValue(value) ? value.value : value);
  return _ReanimatedProxy.default.isSharedValue(value) ? value : defaultValue;
};
const disposeVideo = video => {
  "worklet";

  video === null || video === void 0 || video.dispose();
};
const useVideo = (source, userOptions) => {
  var _userOptions$paused, _userOptions$looping, _userOptions$seek, _userOptions$playback;
  const video = (0, _react.useMemo)(() => source ? _Skia.Skia.Video(source) : null, [source]);
  const isPaused = useOption((_userOptions$paused = userOptions === null || userOptions === void 0 ? void 0 : userOptions.paused) !== null && _userOptions$paused !== void 0 ? _userOptions$paused : defaultOptions.paused);
  const looping = useOption((_userOptions$looping = userOptions === null || userOptions === void 0 ? void 0 : userOptions.looping) !== null && _userOptions$looping !== void 0 ? _userOptions$looping : defaultOptions.looping);
  const seek = useOption((_userOptions$seek = userOptions === null || userOptions === void 0 ? void 0 : userOptions.seek) !== null && _userOptions$seek !== void 0 ? _userOptions$seek : defaultOptions.seek);
  const playbackSpeed = useOption((_userOptions$playback = userOptions === null || userOptions === void 0 ? void 0 : userOptions.playbackSpeed) !== null && _userOptions$playback !== void 0 ? _userOptions$playback : defaultOptions.playbackSpeed);
  const currentFrame = _ReanimatedProxy.default.useSharedValue(null);
  const currentTime = _ReanimatedProxy.default.useSharedValue(0);
  const lastTimestamp = _ReanimatedProxy.default.useSharedValue(-1);
  const duration = (0, _react.useMemo)(() => {
    var _video$duration;
    return (_video$duration = video === null || video === void 0 ? void 0 : video.duration()) !== null && _video$duration !== void 0 ? _video$duration : 0;
  }, [video]);
  const framerate = (0, _react.useMemo)(() => {
    var _video$framerate;
    return (_video$framerate = video === null || video === void 0 ? void 0 : video.framerate()) !== null && _video$framerate !== void 0 ? _video$framerate : 0;
  }, [video]);
  const rotationInDegrees = (0, _react.useMemo)(() => {
    var _video$getRotationInD;
    return (_video$getRotationInD = video === null || video === void 0 ? void 0 : video.getRotationInDegrees()) !== null && _video$getRotationInD !== void 0 ? _video$getRotationInD : 0;
  }, [video]);
  _ReanimatedProxy.default.useFrameCallback(frameInfo => {
    (0, _video.processVideoState)(video, duration, framerate, frameInfo.timestamp, {
      paused: isPaused.value,
      looping: looping.value,
      playbackSpeed: playbackSpeed.value
    }, currentTime, currentFrame, lastTimestamp, seek);
  });
  (0, _react.useEffect)(() => {
    return () => {
      // TODO: should video simply be a shared value instead?
      _ReanimatedProxy.default.runOnUI(disposeVideo)(video);
    };
  }, [video]);
  return {
    currentFrame,
    currentTime,
    duration,
    framerate,
    rotationInDegrees
  };
};
exports.useVideo = useVideo;
//# sourceMappingURL=useVideo.js.map